#!/usr/bin/perl -w

my $copyright = "
Copyright (C) 2002-2005  Jeff Abrahamson  jeff\@purple.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
USA.

See also <http://www.fsf.org/copyleft/gpl.html>
";


use strict;
use Getopt::Long;
use FileHandle;
use Digest::SHA qw(sha1_hex);
use Date::Parse;


# if(scalar(@ARGV) == 0) {
#     print STDERR $copyright;
#     exit 0;
# }

my $geometry='164x164';
my $link_size='700x700';	# 0 means no back-links
my $across=3;
my $input_dir=".";
my $output_dir=".";
my $index_name="";
my $reverse_index_name="";	# Index page links back to (if anywhere)
my $verbose=0;
my $quiet=0;
my $help=0;
my $copyright_holder="";
GetOptions('geometry=s' => \$geometry,
	   'link=i' => \$link_size,
	   'across=i' => \$across,
	   'input=s' => \$input_dir,
	   'output=s' => \$output_dir,
	   'index=s' => \$index_name,
	   'verbose' => \$verbose,
	   'quiet' => \$quiet,
	   'reverse=s' => \$reverse_index_name,
	   'help' => \$help,
	   'copyright=s' => \$copyright_holder);

if($help) {
    print STDERR "$copyright\n";

    print "Usage: pic-essay <options> image1 image2 ...\n";
    print "   or: pic-essay <options> dir\n";
    print "\t --geometry <percent reduction>\n";
    print "\t --link <percent reduction for back links, 0 for none\n";
    print "\t --across <number of images before line break>\n";
    print "\t --input <directory in which to find original files>\n";
    print "\t --output <directory in which to put new files>\n";
    print "\t --index <name of master index file (e.g., index.html)>\n";
    print "\t --reverse <reverse (up to) index name>\n";
    print "\t --copyright <name>  ('none' for no message)\n";
    print "\t --quiet\n";
    print "\t --verbose\n";
    print "\t --help\n";
    exit 0;
}
if($across < 1) {
    print STDERR "Illegal across value ($across), using 1 instead\n";
    $across=1;
}
mkdir("$output_dir/s");

# Delay times for slideshow.
my @delays = (2,3,5,10);
my $default_delay = 2;		# index into @delays

# Insert an undef at the beginning to indicate a stopped slideshow (no
# slideshow).
unshift @delays, undef;

my @files = @ARGV;
if(scalar(@ARGV) == 0) {
    # No image files specified, so use files in input directory
    #
    # Because of this next line, we'll need to chomp individual
    # elements of @files array
    @files = `pic-ls $input_dir/*jpg`;
    if($index_name eq "") {
	if($input_dir eq ".") {
	    my $cwd = `pwd`;
	    chomp($cwd);
	    $index_name = `basename $cwd`;
	} else {
	    $index_name = `basename $input_dir`;
	}
	chomp($index_name);
	$index_name .= '.html';
    }
} elsif($input_dir ne ".") {
    for(my $i = 0; $i < scalar(@files); $i++) {
	$files[$i] = $input_dir . "/" . $files[$i];
    }
    $index_name = 'index.html' if $index_name eq "";
} else {
    $index_name = 'index.html' if $index_name eq "";
}
my $index_fh = open_index();
make_photo_essay($index_fh,@files);
$index_fh->close or warn "Failed to close main index file";
exit 0;


######################################################################
#
#   End of main program, begin functions to support main program
#
######################################################################


sub open_index {

    my $fh = new FileHandle;
    $fh->open(">$output_dir/$index_name")
	or die "Can't open $output_dir/$index_name for writing.";
    return $fh;
}



sub make_photo_essay {

    my($index,@files) = @_;

    $index->print("<html><title>Title</title>\n<body>\n<h1>Photos</h1>\n");
    $index->print("<!-- This file generated by pic-essay. -->\n");
    $index->print("<p><a href=\"$reverse_index_name\">back</a><p>\n");
    my $intro = get_intro_text();
    $index->print($intro);
    $index->print("<p>Click images to enlarge.\n<p>\n");
    
    my $row_counter = 1;			# across counter
    my($images,$captions) = ('','');
    my($a_start,$a_end) = ('','');
    my %base_names;
    my %sha1_names;
    for my $file (@files) {
	chomp($file);
	my $base = get_base_name($file);
	$base_names{$file} = $base;
	my $sha1 = sha1_hex($file);
	$sha1_names{$file} = $sha1;
    }
    for(my $i = 0; $i < scalar(@files); $i++) {

	# $f is the path to the file, including the file component
	my $f = $files[$i];
	
	# $b is the filename with no path component
	my $b = $base_names{$f};
	print "$b...\n" if !$quiet;

	# sha1 is the sha1 hash of the base filename
	my $sha1 = $sha1_names{$f};
	
	my $f_ = $f;
	my($short_caption,$long_caption) = ($b,$b);

	# Create the thumbnail
	convert($geometry,$f_,"$sha1.jpg");
	my $alt = $b;
	$b =~ s/:/%3A/g;
	if($link_size) {
	    # Create the back link
	    convert($link_size, $f_, "$alt.jpg");
	    write_slides($alt,$i,\@files,\%sha1_names,$short_caption,$long_caption,$f);
	    $a_start="<a href=\"s/$sha1.html\">";
	    $a_end="</a>";
	} else {
	    $a_start='';
	    $a_end='';
	}
	$images .= "<td>$a_start<img src=\"s/$sha1.jpg\" alt=\"$b\">$a_end</td>\n";
	$captions .= "<td>\n$short_caption\n</td>";
	if($row_counter++ % $across == 0) {
	    print_row($index,$images,$captions);
	    $row_counter=1;
	    $images='';
	    $captions='';
	}
    }
    print_row($index,$images,$captions) if $images;

    $index->print("<p><a href=\"$reverse_index_name\">back</a><p>\n");
    emit_copyright($index,$input_dir . '/');
    $index->print("</body></html>\n");
    return;
}



sub print_row {

    my($fh,$images,$captions) = @_;
    
    $fh->print("<table border=\"0\" cellpadding=\"10\">\n");
    $fh->print("<tr>$images</tr><tr>$captions</tr>\n");
    $fh->print("</table><hr>\n");
    return;
}


sub get_base_name {

    my $f = shift;
    chomp($f);
    my $b = $f;
    $b =~ s|^.*/||;
    $b =~ s|\.jpg$||;
    return $b;
}



sub get_dir_name {

    my $f = shift;
    chomp($f);
    my $d = $f;
    if($d !~ m|/|) {
	$d = './';
    } else {
	$d =~ s|(^.*/).*$|$1|;
    }
    return $d;
}



sub write_slides {

    my($b,$i,$file_ref,$sha_ref,$short_caption,$caption,$orig_name) = @_;

    for my $delay (@delays) {
	my $before = ($i > 0) ? $sha_ref->{$file_ref->[$i-1]} : "";
	if($before) {
	    $before = get_base_name($before);
	    $before = sha1_hex(delay_filename($before,$delay)) if defined($delay);
	    $before .= '.html';
	}
	my $after = ($i + 1 < scalar(@{$file_ref})) ? $sha_ref->{$file_ref->[$i+1]} : "";
	if($after) {
	    $after = get_base_name($after);
	    $after = sha1_hex(delay_filename($after,$delay)) if defined($delay);
	    $after .= '.html';
	}
	my $sha_name = $sha_ref->{$file_ref->[$i]};
	my $orig_sha_name = $sha_name;
	$sha_name = sha1_hex(delay_filename($sha_name,$delay)) if defined($delay);
	my $html_name = "$sha_name.html";
	my $alt = $b;
	$b =~ s/:/%3A/g;
	
	write_slide($b,$i,$alt,$html_name,$orig_sha_name,$before,$after,$short_caption,$caption,$orig_name,$delay,$file_ref->[$i]);
    }
    return;
}



sub write_slide {
    my($b,$i,$alt,$html_name,$orig_sha_name,$before,$after,$short_caption,$caption,$orig_name,$delay,$file) = @_;

    my $fh = new FileHandle;
    $fh->open(">$output_dir/s/$html_name")
	or die "Can't open $output_dir/s/$html_name for writing.";
    write_html_header($fh,$b,$delay,$after);
    write_controls($fh,$before,$index_name,$after,$delay,$orig_sha_name);
    $fh->print("<p><img src=\"$b.jpg\" alt=\"$alt\">\n");
    $fh->print("<p>[ $short_caption ]<p>\n") if($short_caption ne $caption);
    $fh->print("<p>$caption<p>\n");
    write_controls($fh,$before,$index_name,$after,$delay,$orig_sha_name);
    insert_orig_filename($fh, $orig_name);
    emit_copyright($fh, $file);
    $fh->print("</body></html>\n");
    $fh->close or warn "Failed to close $html_name";
    return;
}



sub write_controls {

    my($fh,$before,$index_name,$after,$delay,$orig_sha_name) = @_;

    write_button($fh, $before, "Previous");
    write_button($fh, "../$index_name", "Index");
    write_button($fh, $after, "Next");
    $fh->print('&nbsp;|&nbsp;');

    if(defined($delay)) {
	my $no_slideshow = $orig_sha_name . '.html';
	write_button($fh,$no_slideshow,"Stop Slideshow");
    } else {
	my $slideshow = sha1_hex(delay_filename($orig_sha_name,
						$delays[$default_delay])) . '.html';
	write_button($fh,$slideshow,"Slideshow");
    }
    $fh->print('&nbsp;&nbsp;(slide delay: ');
    for my $d (@delays) {
	next if !defined($d);
	if(defined($delay) and $d == $delay) {
	    $fh->print(" $d ");
	} else {
	    my $slideshow = sha1_hex(delay_filename($orig_sha_name,$d)) . '.html';
	    write_button($fh,$slideshow,$d);
	}
    }
    $fh->print(")\n");
    return;
}



sub write_html_header {

    # FileHandle to write to, page name, then delay until next slide, next slide;
    # undef if none.
    my($fh,$name,$delay,$next) = @_;

    my $charset = '<meta http-equiv="Content-type" content="text/html;charset=UTF-8">';
    if(defined($delay) and defined($next) and $next ne "") {
	my $meta = "<META HTTP-EQUIV=\"Refresh\" CONTENT=\"$delay; URL=$next\">";
	$fh->print("<html><head>$meta$charset<title>$name</title></head>\n<body>\n\n");
    } else {
	$fh->print("<html><head>$charset<title>$name</title></head>\n<body>\n\n");
    }
    $fh->print("<!-- This file generated by pic-essay. -->\n");
    return;
}



sub write_button {

    my($fh,$filename,$label) = @_;

    if($filename) {
	$filename =~ s/:/%3A/g;
	$fh->print("<a href=\"$filename\">$label</a>\n");
    } else {
	$fh->print("$label\n");
    }
    return;
}


sub get_caption {

    my($file,$base) = @_;

    my $exif = $file;
    my $base_orig = $base;
    $file =~ s/jpg$/txt/i;
    $base =~ s/_+/ /g;
    if( not ($base_orig =~ m/(.*)__(.*)/)) {
	# Base name doesn't have a date embedded in it, so see if the
	# jpeg has an EXIF header with the date and time
	my $line = `exiftags -i -s':' $exif | grep "Image Created:"`;
	$line =~ s/^Image Created:\s*//;
	chomp($line);
	$base = "$base_orig<br>[[ $line ]]" if($line);
    }
    if(-r $file) {
	my $fh = new FileHandle;
	$fh->open("<$file") or die "Can't open $file";
	local $/;
	undef $/;
	my $comment = <$fh>;
	$comment =~ s/\n\n/\n<p>\n/g; # html-ize paragraph breaks
	return($base,$comment) if($comment);
    }
    return($base,$base);
}



sub maybe_two_comments {

    my($comment) = @_;

    # Should check if first line is '2' all by itself. If yes, take
    # the second line as one comment and the rest of the file as the
    # longer comment. For now, do nothing.
    return($comment,$comment);
}
	


sub get_intro_text {

    my $file = "$input_dir/index.txt";
    my $intro = get_file_text($file);
    if($intro) {
	$intro =~ s/\n\n/\n<p>\n/g;
	$intro = "<p>$intro<p><hr><p>";
	return($intro) if($intro);
    }
    return("");

}



sub get_file_text {

    my $file = shift;
    if(-r $file) {
	my $fh = new FileHandle;
	$fh->open("<$file") or die "Can't open $file";
	local $/;
	undef $/;
	my $text = <$fh>;
	return($text) if($text);
    }
    return("");

}



# Assumes copyright in current year, should accept option
sub emit_copyright {

    my $fh = shift;
    my $file = shift;

my $cc_license = '
<!-- Creative Commons License -->
<a rel="license" href="http://creativecommons.org/licenses/by-sa/2.5/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a><br />
This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons License</a>.
<!-- /Creative Commons License -->


<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
   <license rdf:resource="http://creativecommons.org/licenses/by-sa/2.5/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-sa/2.5/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
   <requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>

</rdf:RDF>

-->
';

    my($owner,$license,$year) = copyright_info($file);

    $fh->print("\n<hr><p>Copyright $year, $owner.\n");
    if($cc_license =~ m/^ccsa/) {
	$fh->print("<p> $cc_license \n");
    } elsif($cc_license =~ m/^arr/) {
	$fh->print("<p> All rights reserved \n");
    } else {
	$fh->print("<p> $cc_license \n");
    }
    $fh->print("<p><em>This file generated by pic-essay.</em>\n");
    return;
}



sub insert_orig_filename {

    my($fh,$filename) = @_;

    $fh->print("\n<!-- ORIG_FILENAME: $filename : -->\n");
    return;
}



sub convert {

    my($geometry,$src,$dest) = @_;

    my $dst = "$output_dir/s/$dest";
    # Only convert if needed based on modification times
    my @src_stat = stat($src);
    my @dst_stat = stat($dst);
    if(!defined($src_stat[9])) {
	warn "Can't find source image '$src'";
	return;
    } elsif(!defined($dst_stat[9]) or ($src_stat[9] > $dst_stat[9])) {
	my $cmd = "convert -geometry $geometry $src jpg:$dst";
	`$cmd &`;
    }
    return;
}



sub delay_filename {

    my($file,$delay) = @_;

    return $file . '====' . $delay . '====' . $index_name;
}

    

sub copyright_info {

    my $file = shift;

    if($file !~ m/jpg$/) {
	my $cc_owner = 'Jeff Abrahamson';
	my $cc_license = '';
	my @time = localtime();
	my $cc_year = $time[5] + 1900;
	return ($cc_owner,$cc_license,$cc_year);
    }

    my($cc_owner,$cc_license,$cc_year) = ('','','');
    my $dir = get_dir_name($file);
    
    $cc_owner = get_file_text($dir . '/copyright-owner.txt');
    $cc_owner = get_file_text($file . 'owner') if(!$cc_owner);
    $cc_owner = 'Jeff Abrahamson' if(!$cc_owner);
    chomp($cc_owner);

    # License choices:
    #   'ccsa' (Creative Commons Share-alike),
    #   'arr' (all rights reserved)
    #   actual license text
    $cc_license = get_file_text($dir . '/license.txt');
    $cc_license = get_file_text($file . '/license') if(!$cc_license);
    $cc_license = 'ccsa';

    $cc_year = $file;
    $cc_year =~ s|^.*/||;
    $cc_year =~ s/(.*)-.*$/$1/;
    $cc_year =~ s/(....).*/$1/g;
    if(!$cc_year) {
	my @ltime = localtime();
	$cc_year = $ltime[5] + 1900;
    }
    
    #return('Stéphane Birklé',$cc_license,'2012');
    return($cc_owner,$cc_license,$cc_year);
}


sub write_regen {

    

}

